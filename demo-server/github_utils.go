package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"statetoken"
	"strings"
)

type GithubTokenResp struct {
	AccessToken string `json:"access_token"`
	TokenType   string `json:"token_type"`
	Scope       string `json:"scope"`
}

var githubOauthCodeUrl = "https://github.com/login/oauth/authorize"

func makeGithubLoginUrl() (string, error) {
	params := url.Values{}
	params.Add("client_id", ENV["GITHUB_CLIENT_ID"])
	params.Add("redirect_uri", ENV["GITHUB_CALLBACK_URL"])
	params.Add("scope", "user:email")
	// stateToken is a random string generated by openssl rand -hex xxx
	stateToken, err := statetoken.GetNewToken(15)
	if err != nil{
		return "", fmt.Errorf("wrror while generating new login url token %w", err)
	}
	
	params.Add("state", stateToken)

	full_url := fmt.Sprintf("%s?%s", githubOauthCodeUrl, params.Encode())
	return full_url, nil
}

var githubTokenUrl = "https://github.com/login/oauth/access_token"

func getGithubAccessToken(githubCode string) (GithubTokenResp, error) {
	// Exchange code for access token
	data := url.Values{}
	data.Set("client_id", ENV["GITHUB_CLIENT_ID"])
	data.Set("client_secret", ENV["GITHUB_CLIENT_SECRET"])
	data.Set("code", githubCode)
	data.Set("redirect_uri", ENV["GITHUB_CALLBACK_URL"])
	// http.Error(w, "Request creation failed", http.StatusInternalServerError)
	req, err := http.NewRequest("POST", githubTokenUrl, strings.NewReader(data.Encode()))
	if err != nil {
		return GithubTokenResp{}, fmt.Errorf("github token request creation failed: %w", err)
	}
	req.Header.Set("Accept", "application/json")
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return GithubTokenResp{}, fmt.Errorf("github token request call failed: %w", err)
	}
	defer resp.Body.Close()

	tokenResp := GithubTokenResp{}
	if err := json.NewDecoder(resp.Body).Decode(&tokenResp); err != nil {
		return GithubTokenResp{}, fmt.Errorf("github token decode failed: %w", err)
	}

	return tokenResp, nil
}

var githubUserInfoUrl = "https://api.github.com/user/emails"

func getGithubUserEmail(token GithubTokenResp) (string, error) {

	// Use token to call GitHub API
	userReq, _ := http.NewRequest("GET", githubUserInfoUrl, nil)
	userReq.Header.Set("Authorization", "Bearer "+token.AccessToken)
	userReq.Header.Set("Accept", "application/vnd.github+json")

	userResp, err := http.DefaultClient.Do(userReq)
	if err != nil {
		return "", fmt.Errorf("github user info call failed: %w", err)
	}
	defer userResp.Body.Close()

	var emails []struct {
		Email   string `json:"email"`
		Primary bool   `json:"primary"`
	}
	if err := json.NewDecoder(userResp.Body).Decode(&emails); err != nil {
		return "", fmt.Errorf("github user info decoder failed: %w", err)
	}

	userEmail := ""
	for _, e := range emails {
		if e.Primary {
			userEmail = e.Email
			break
		}
	}
	if userEmail == "" && len(emails) > 0 {
		userEmail = emails[0].Email
	}

	return userEmail, nil

}
